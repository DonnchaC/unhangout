---
- name: Create postgres user
  command: docker exec postgres psql -U postgres {{django_postgres_db}} -c "CREATE EXTENSION IF NOT EXISTS pg_trgm;"
#  tags:
#   - django
#   - django-postgres

- name: setup static and media file hosting through nginx-proxy
  template: src=static.j2 dest=/var/docker-volumes/nginx/vhosts.d/{{django_domain}}
#  tags:
#   - django
#   - django-nginx
#   - django-config

- set_fact:
    proxy_vars:
      VIRTUAL_HOST: "{{django_domain}}"
      LETSENCRYPT_HOST: "{{django_domain}}"
      LETSENCRYPT_EMAIL: "admin@code27.org"

- set_fact:
    app_vars:
      DOMAIN: "{{django_domain}}"
      POSTGRES_HOST: postgres 
      POSTGRES_DB: "{{django_postgres_db}}"
      POSTGRES_USER: "{{django_postgres_user}}"
      POSTGRES_PASSWORD: "{{django_postgres_password}}"
      POSTGRES_PORT: "5432"
      MEMCACHED_HOST: memcached
      REDIS_HOST: redis
      REDIS_PORT: "6379"
      BROKER_URL: redis://redis:6379/0
      YOUTUBE_API_KEY: "{{youtube_api_key}}"
      ETHERPAD_SERVER: "https://{{uh_etherpad_domain}}"
      EMAIL_HOST: "{{mailgun_smtp_hostname}}"
      EMAIL_HOST_USER: "{{mailgun_smtp_login}}"
      EMAIL_HOST_PASSWORD: "{{mailgun_smtp_password}}"
      MAILGUN_ACTIVE_API_KEY: "{{mailgun_active_api_key}}"
      ETHERPAD_API_KEY: "{{uh_etherpad_api_key}}"

- name: Create folder for celery with correct permissions
  file: path=/var/docker-volumes/{{django_domain}}/celery owner=5313 group=5313 state=directory

- name: Run docker container for django http & ws service
  docker_container:
    name: "{{django_domain}}"
    image: dirkcuys/unhangout:latest
    state: started
    #pull: yes # TODO
    recreate: true
    restart: yes
    restart_policy: always
    volumes:
    - "/var/docker-volumes/nginx/static/{{django_domain}}/static:/opt/app/public"
    - "/var/docker-volumes/nginx/static/{{django_domain}}/media:/opt/app/media"
    - "/var/docker-volumes/{{django_domain}}/celery:/var/lib/celery"
    - "/var/docker-volumes/{{django_domain}}/log:/var/log"
    links:
    - postgres
    - redis
    - memcached
    env: "{{ proxy_vars | combine(app_vars) }}"

- name: Run docker container for celery worker
  docker_container:
    name: "{{django_domain}}-celery"
    image: dirkcuys/unhangout:latest
    command: /opt/app-venv/bin/celery worker -A reunhangout
    user: celery
    state: started
    #pull: yes # TODO
    recreate: true
    restart: yes
    restart_policy: always
    volumes:
    - "/var/docker-volumes/nginx/static/{{django_domain}}/static:/opt/app/public"
    - "/var/docker-volumes/nginx/static/{{django_domain}}/media:/opt/app/media"
    - "/var/docker-volumes/{{django_domain}}/celery:/var/lib/celery"
    - "/var/docker-volumes/{{django_domain}}/log:/var/log"
    links:
    - postgres
    - redis
    - memcached
    env: "{{app_vars}}"


- name: Run docker container for celery beat worker
  docker_container:
    name: "{{django_domain}}-celerybeat"
    image: dirkcuys/unhangout:latest
    command: /opt/app-venv/bin/celery beat -A reunhangout --schedule=/var/lib/celery/celerybeat-schedule --pidfile=/var/lib/celery/celerybeat.pid
    user: celery
    state: started
    #pull: yes # TODO
    recreate: true
    restart: yes
    restart_policy: always
    volumes:
    - "/var/docker-volumes/nginx/static/{{django_domain}}/static:/opt/app/public"
    - "/var/docker-volumes/nginx/static/{{django_domain}}/media:/opt/app/media"
    - "/var/docker-volumes/{{django_domain}}/celery:/var/lib/celery"
    - "/var/docker-volumes/{{django_domain}}/log:/var/log"
    links:
    - postgres
    - redis
    - memcached
    env: "{{app_vars}}"

#   - name: Build prod assets
#     become: yes
#     become_user: "{{main_user_name}}" 
#     command: "{{django_project_dir}}build_prod_assets.sh"
#     register: build_prod_assets
#     changed_when: build_prod_assets.stdout.find("Changed") != -1
#     notify: restart reunhangout services
#     tags: ['reunhangout', 'reunhangout-post', 'djangocode']

#   - name: Sync auth providers
#     command: "{{django_venv_dir}}bin/python {{django_project_dir}}manage.py sync_auth_providers"
#     register: sync_auth_providers
#     changed_when: sync_auth_providers.stdout.find("changed") != -1
#     tags: ['reunhangout', 'reunhangout-post']

#   - name: Collect static again
#     become: yes
#     become_user: "{{main_user_name}}" 
#     register: collectstatic_output
#     changed_when: 'not collectstatic_output.stdout.startswith("\n0 static files copied")'
#     command: "{{django_venv_dir}}bin/python {{django_project_dir}}manage.py collectstatic --noinput"
#     tags: ['reunhangout', 'reunhangout-post', 'djangocode']
